// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tagservice/repository/entgo/ent/namespace"
	"tagservice/repository/entgo/ent/relation"
	"tagservice/repository/entgo/ent/tag"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Relation is the model entity for the Relation schema.
type Relation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID int `json:"tag_id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID int `json:"entity_id,omitempty"`
	// NamespaceID holds the value of the "namespace_id" field.
	NamespaceID int `json:"namespace_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RelationQuery when eager-loading is set.
	Edges RelationEdges `json:"edges"`
}

// RelationEdges holds the relations/edges for other nodes in the graph.
type RelationEdges struct {
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// Namespace holds the value of the namespace edge.
	Namespace *Namespace `json:"namespace,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RelationEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[0] {
		if e.Tag == nil {
			// The edge tag was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RelationEdges) NamespaceOrErr() (*Namespace, error) {
	if e.loadedTypes[1] {
		if e.Namespace == nil {
			// The edge namespace was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: namespace.Label}
		}
		return e.Namespace, nil
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Relation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case relation.FieldID, relation.FieldTagID, relation.FieldEntityID, relation.FieldNamespaceID:
			values[i] = new(sql.NullInt64)
		case relation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Relation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Relation fields.
func (r *Relation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case relation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case relation.FieldTagID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value.Valid {
				r.TagID = int(value.Int64)
			}
		case relation.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				r.EntityID = int(value.Int64)
			}
		case relation.FieldNamespaceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field namespace_id", values[i])
			} else if value.Valid {
				r.NamespaceID = int(value.Int64)
			}
		case relation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTag queries the "tag" edge of the Relation entity.
func (r *Relation) QueryTag() *TagQuery {
	return (&RelationClient{config: r.config}).QueryTag(r)
}

// QueryNamespace queries the "namespace" edge of the Relation entity.
func (r *Relation) QueryNamespace() *NamespaceQuery {
	return (&RelationClient{config: r.config}).QueryNamespace(r)
}

// Update returns a builder for updating this Relation.
// Note that you need to call Relation.Unwrap() before calling this method if this Relation
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Relation) Update() *RelationUpdateOne {
	return (&RelationClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Relation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Relation) Unwrap() *Relation {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Relation is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Relation) String() string {
	var builder strings.Builder
	builder.WriteString("Relation(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", tag_id=")
	builder.WriteString(fmt.Sprintf("%v", r.TagID))
	builder.WriteString(", entity_id=")
	builder.WriteString(fmt.Sprintf("%v", r.EntityID))
	builder.WriteString(", namespace_id=")
	builder.WriteString(fmt.Sprintf("%v", r.NamespaceID))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Relations is a parsable slice of Relation.
type Relations []*Relation

func (r Relations) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}

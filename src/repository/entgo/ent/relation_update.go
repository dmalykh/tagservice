// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tagservice/repository/entgo/ent/namespace"
	"tagservice/repository/entgo/ent/predicate"
	"tagservice/repository/entgo/ent/relation"
	"tagservice/repository/entgo/ent/tag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RelationUpdate is the builder for updating Relation entities.
type RelationUpdate struct {
	config
	hooks    []Hook
	mutation *RelationMutation
}

// Where appends a list predicates to the RelationUpdate builder.
func (ru *RelationUpdate) Where(ps ...predicate.Relation) *RelationUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetTagID sets the "tag_id" field.
func (ru *RelationUpdate) SetTagID(i int) *RelationUpdate {
	ru.mutation.SetTagID(i)
	return ru
}

// SetEntityID sets the "entity_id" field.
func (ru *RelationUpdate) SetEntityID(i int) *RelationUpdate {
	ru.mutation.ResetEntityID()
	ru.mutation.SetEntityID(i)
	return ru
}

// AddEntityID adds i to the "entity_id" field.
func (ru *RelationUpdate) AddEntityID(i int) *RelationUpdate {
	ru.mutation.AddEntityID(i)
	return ru
}

// SetNamespaceID sets the "namespace_id" field.
func (ru *RelationUpdate) SetNamespaceID(i int) *RelationUpdate {
	ru.mutation.SetNamespaceID(i)
	return ru
}

// SetTag sets the "tag" edge to the Tag entity.
func (ru *RelationUpdate) SetTag(t *Tag) *RelationUpdate {
	return ru.SetTagID(t.ID)
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (ru *RelationUpdate) SetNamespace(n *Namespace) *RelationUpdate {
	return ru.SetNamespaceID(n.ID)
}

// Mutation returns the RelationMutation object of the builder.
func (ru *RelationUpdate) Mutation() *RelationMutation {
	return ru.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (ru *RelationUpdate) ClearTag() *RelationUpdate {
	ru.mutation.ClearTag()
	return ru
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (ru *RelationUpdate) ClearNamespace() *RelationUpdate {
	ru.mutation.ClearNamespace()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RelationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RelationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RelationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RelationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RelationUpdate) check() error {
	if v, ok := ru.mutation.TagID(); ok {
		if err := relation.TagIDValidator(v); err != nil {
			return &ValidationError{Name: "tag_id", err: fmt.Errorf(`ent: validator failed for field "Relation.tag_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.EntityID(); ok {
		if err := relation.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "Relation.entity_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.NamespaceID(); ok {
		if err := relation.NamespaceIDValidator(v); err != nil {
			return &ValidationError{Name: "namespace_id", err: fmt.Errorf(`ent: validator failed for field "Relation.namespace_id": %w`, err)}
		}
	}
	if _, ok := ru.mutation.TagID(); ru.mutation.TagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Relation.tag"`)
	}
	if _, ok := ru.mutation.NamespaceID(); ru.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Relation.namespace"`)
	}
	return nil
}

func (ru *RelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   relation.Table,
			Columns: relation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: relation.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.EntityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: relation.FieldEntityID,
		})
	}
	if value, ok := ru.mutation.AddedEntityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: relation.FieldEntityID,
		})
	}
	if ru.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relation.TagTable,
			Columns: []string{relation.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relation.TagTable,
			Columns: []string{relation.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relation.NamespaceTable,
			Columns: []string{relation.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relation.NamespaceTable,
			Columns: []string{relation.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RelationUpdateOne is the builder for updating a single Relation entity.
type RelationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RelationMutation
}

// SetTagID sets the "tag_id" field.
func (ruo *RelationUpdateOne) SetTagID(i int) *RelationUpdateOne {
	ruo.mutation.SetTagID(i)
	return ruo
}

// SetEntityID sets the "entity_id" field.
func (ruo *RelationUpdateOne) SetEntityID(i int) *RelationUpdateOne {
	ruo.mutation.ResetEntityID()
	ruo.mutation.SetEntityID(i)
	return ruo
}

// AddEntityID adds i to the "entity_id" field.
func (ruo *RelationUpdateOne) AddEntityID(i int) *RelationUpdateOne {
	ruo.mutation.AddEntityID(i)
	return ruo
}

// SetNamespaceID sets the "namespace_id" field.
func (ruo *RelationUpdateOne) SetNamespaceID(i int) *RelationUpdateOne {
	ruo.mutation.SetNamespaceID(i)
	return ruo
}

// SetTag sets the "tag" edge to the Tag entity.
func (ruo *RelationUpdateOne) SetTag(t *Tag) *RelationUpdateOne {
	return ruo.SetTagID(t.ID)
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (ruo *RelationUpdateOne) SetNamespace(n *Namespace) *RelationUpdateOne {
	return ruo.SetNamespaceID(n.ID)
}

// Mutation returns the RelationMutation object of the builder.
func (ruo *RelationUpdateOne) Mutation() *RelationMutation {
	return ruo.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (ruo *RelationUpdateOne) ClearTag() *RelationUpdateOne {
	ruo.mutation.ClearTag()
	return ruo
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (ruo *RelationUpdateOne) ClearNamespace() *RelationUpdateOne {
	ruo.mutation.ClearNamespace()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RelationUpdateOne) Select(field string, fields ...string) *RelationUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Relation entity.
func (ruo *RelationUpdateOne) Save(ctx context.Context) (*Relation, error) {
	var (
		err  error
		node *Relation
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RelationUpdateOne) SaveX(ctx context.Context) *Relation {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RelationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RelationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RelationUpdateOne) check() error {
	if v, ok := ruo.mutation.TagID(); ok {
		if err := relation.TagIDValidator(v); err != nil {
			return &ValidationError{Name: "tag_id", err: fmt.Errorf(`ent: validator failed for field "Relation.tag_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.EntityID(); ok {
		if err := relation.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "Relation.entity_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.NamespaceID(); ok {
		if err := relation.NamespaceIDValidator(v); err != nil {
			return &ValidationError{Name: "namespace_id", err: fmt.Errorf(`ent: validator failed for field "Relation.namespace_id": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.TagID(); ruo.mutation.TagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Relation.tag"`)
	}
	if _, ok := ruo.mutation.NamespaceID(); ruo.mutation.NamespaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Relation.namespace"`)
	}
	return nil
}

func (ruo *RelationUpdateOne) sqlSave(ctx context.Context) (_node *Relation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   relation.Table,
			Columns: relation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: relation.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Relation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, relation.FieldID)
		for _, f := range fields {
			if !relation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != relation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.EntityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: relation.FieldEntityID,
		})
	}
	if value, ok := ruo.mutation.AddedEntityID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: relation.FieldEntityID,
		})
	}
	if ruo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relation.TagTable,
			Columns: []string{relation.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relation.TagTable,
			Columns: []string{relation.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relation.NamespaceTable,
			Columns: []string{relation.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relation.NamespaceTable,
			Columns: []string{relation.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Relation{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

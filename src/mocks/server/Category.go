// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "tagservice/server/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Category is an autogenerated mock type for the Category type
type Category struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *Category) Create(ctx context.Context, data *model.CategoryData) (model.Category, error) {
	ret := _m.Called(ctx, data)

	var r0 model.Category
	if rf, ok := ret.Get(0).(func(context.Context, *model.CategoryData) model.Category); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(model.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.CategoryData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Category) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Category) GetById(ctx context.Context, id uint64) (model.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Category
	if rf, ok := ret.Get(0).(func(context.Context, uint64) model.Category); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, limit, offset
func (_m *Category) GetList(ctx context.Context, limit uint64, offset uint64) ([]model.Category, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []model.Category
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []model.Category); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, data
func (_m *Category) Update(ctx context.Context, id uint64, data *model.CategoryData) (model.Category, error) {
	ret := _m.Called(ctx, id, data)

	var r0 model.Category
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *model.CategoryData) model.Category); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Get(0).(model.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, *model.CategoryData) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategory creates a new instance of Category. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategory(t testing.TB) *Category {
	mock := &Category{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

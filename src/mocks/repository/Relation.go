// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "tagservice/server/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Relation is an autogenerated mock type for the Relation type
type Relation struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, relation
func (_m *Relation) Create(ctx context.Context, relation ...*model.Relation) error {
	_va := make([]interface{}, len(relation))
	for _i := range relation {
		_va[_i] = relation[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*model.Relation) error); ok {
		r0 = rf(ctx, relation...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tagIds, namespaceIds, entityIds
func (_m *Relation) Delete(ctx context.Context, tagIds []uint, namespaceIds []uint, entityIds []uint) error {
	ret := _m.Called(ctx, tagIds, namespaceIds, entityIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint, []uint, []uint) error); ok {
		r0 = rf(ctx, tagIds, namespaceIds, entityIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, tagIds, namespaceIds, entityIds
func (_m *Relation) Get(ctx context.Context, tagIds []uint, namespaceIds []uint, entityIds []uint) ([]model.Relation, error) {
	ret := _m.Called(ctx, tagIds, namespaceIds, entityIds)

	var r0 []model.Relation
	if rf, ok := ret.Get(0).(func(context.Context, []uint, []uint, []uint) []model.Relation); ok {
		r0 = rf(ctx, tagIds, namespaceIds, entityIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Relation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint, []uint, []uint) error); ok {
		r1 = rf(ctx, tagIds, namespaceIds, entityIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRelation creates a new instance of Relation. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRelation(t testing.TB) *Relation {
	mock := &Relation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

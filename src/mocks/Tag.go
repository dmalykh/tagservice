// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "github.com/dmalykh/tagservice/tagservice/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Tag is an autogenerated mock type for the Tag type
type Tag struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *Tag) Create(ctx context.Context, data *model.TagData) (model.Tag, error) {
	ret := _m.Called(ctx, data)

	var r0 model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *model.TagData) model.Tag); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(model.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.TagData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Tag) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Tag) GetById(ctx context.Context, id uint) (model.Tag, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, uint) model.Tag); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name, categoryId
func (_m *Tag) GetByName(ctx context.Context, name string, categoryId uint) (model.Tag, error) {
	ret := _m.Called(ctx, name, categoryId)

	var r0 model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) model.Tag); ok {
		r0 = rf(ctx, name, categoryId)
	} else {
		r0 = ret.Get(0).(model.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint) error); ok {
		r1 = rf(ctx, name, categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, categoryId, limit, offset
func (_m *Tag) GetList(ctx context.Context, categoryId uint, limit uint, offset uint) ([]model.Tag, error) {
	ret := _m.Called(ctx, categoryId, limit, offset)

	var r0 []model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, uint) []model.Tag); ok {
		r0 = rf(ctx, categoryId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint, uint) error); ok {
		r1 = rf(ctx, categoryId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationEntities provides a mock function with given fields: ctx, namespaceName, tagGroups
func (_m *Tag) GetRelationEntities(ctx context.Context, namespaceName string, tagGroups [][]uint) ([]model.Relation, error) {
	ret := _m.Called(ctx, namespaceName, tagGroups)

	var r0 []model.Relation
	if rf, ok := ret.Get(0).(func(context.Context, string, [][]uint) []model.Relation); ok {
		r0 = rf(ctx, namespaceName, tagGroups)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Relation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, [][]uint) error); ok {
		r1 = rf(ctx, namespaceName, tagGroups)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagsByEntities provides a mock function with given fields: ctx, namespaceName, entities
func (_m *Tag) GetTagsByEntities(ctx context.Context, namespaceName string, entities ...uint) ([]model.Tag, error) {
	_va := make([]interface{}, len(entities))
	for _i := range entities {
		_va[_i] = entities[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, namespaceName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint) []model.Tag); ok {
		r0 = rf(ctx, namespaceName, entities...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...uint) error); ok {
		r1 = rf(ctx, namespaceName, entities...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRelation provides a mock function with given fields: ctx, tagId, namespace, entitiesId
func (_m *Tag) SetRelation(ctx context.Context, tagId uint, namespace string, entitiesId ...uint) error {
	_va := make([]interface{}, len(entitiesId))
	for _i := range entitiesId {
		_va[_i] = entitiesId[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tagId, namespace)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, ...uint) error); ok {
		r0 = rf(ctx, tagId, namespace, entitiesId...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, data
func (_m *Tag) Update(ctx context.Context, id uint, data *model.TagData) (model.Tag, error) {
	ret := _m.Called(ctx, id, data)

	var r0 model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, uint, *model.TagData) model.Tag); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Get(0).(model.Tag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, *model.TagData) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTag creates a new instance of Tag. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTag(t testing.TB) *Tag {
	mock := &Tag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
